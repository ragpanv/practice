branches - to preserve original code / data and make changes in its another version
* we can do parallel development
* try diff things and merge them afterwards if needed


#### list all branches (shows the list of branches that we have)
git branch

#### create new branch
git branch growth

$ git branch
  growth
* main -> active branch

#### switch to other branch
git chekout growth

### create a branch and checkout the branch
git checkout -b test

$ git branch
* growth
  main

we are in 'growth' branch, the changes made from now will be stored in growth branch (not in main branch)
make change to first.py -> then commit
- move to main branch (changes done at growth branch is not seen here)
- make change in main branch ( this is not seen in growth branch)



#### merge
to merge you have to be on main branch
git merge growth -> merges growth branch into active (main) branch


-- do what ever changes is needed

### push changes to github (upstream) (to push the branch, switch to that branch)
git checkout growth
git push -> show the cmd to run i.e. 
=>[ git push --set-upstream origin growth ]

### delete a branch
(switch to main branch and run delete cmd) [-d => to delete]
git branch -d test


## HEAD
### head is reference to most recent commit in current branch
git show HEAD -- show recent commit (shows difference as well)
git show <recent commit id> -- HEAD is shorthand of recent commit id


### to check differences in commit
eg 
commitId1  at 9:15  HEAD
commitId2  at 9:05  HEAD~1
commitId3  at 8:23  HEAD~2
git difftool <commit id2> <commit i1> 
same as
git difftool HEAD~1 HEAD


*** in .git folder, we have file name HEAD
when we are in "main" branch - it points to "ref: refs/heads/main"
when we are in "growth" branch - it points to "ref: refs/heads/growth"

when HEAD is not pointing to most recent commit, we go into "detached HEAD" state

git checkout <commitId2> [now we are in detached HEAD state as it in not pointing to recent commit]
---
$ git checkout commitid
Note: switching to 'commitid'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
---

$ git branch
* (HEAD detached at xxxxxxx)
  growth
  main

git checkout main [back to main branch, HEAD state]



## gitignore
if we have some file or folders which we don't want to include in updates every time
eg: dummmy.txt (file) and dummy/ (folder) - which we don't want to track
[similar to some files or folders that text editor creates]
[these will show everytime when we run status cmd (in red, unstaged)]

1. create new file .gitignore inside the folder (same level as .git)
2. add .gitignore file (stage it) -> $ git add .gitignore
3. add those file and folders name in that gitignore file like 
    /dummy
    dummmy.txt
4. we need to keep staging gitignore file when we make changes as it will show in unstaged afterwards
 but gitignore will take care of those added folders and files (it will be ignored)